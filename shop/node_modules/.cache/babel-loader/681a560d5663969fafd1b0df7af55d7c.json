{"ast":null,"code":"import axios from 'axios';\nimport serverUrl from '../../../../common/constants/urls';\nimport transliterate from '../../../../common/untils/transliterate';\nimport setClassErrorById from '../../../../common/untils/setClassErrorById';\nconst newProduct = '/add-product';\n\nasync function postNewProduct(state) {\n  const imgAlt = transliterate(state.productName);\n  const imgTitle = imgAlt;\n  const newCategory = state.categoryName === 'Электротовары и свет' ? state.categoriesArray.categories[0].category : state.categoryName;\n  let categoryId = state.categoriesArray.categories.filter(category => category.category === newCategory).map(category => category.id).join('');\n  categoryId = Number(categoryId);\n  let price = '';\n\n  if (state.productPrice.slice(-1) === '.') {\n    price = state.productPrice.slice(0, -5);\n  }\n\n  const inStock = state.productInStock === 'да' ? Boolean(true) : Boolean(false);\n  const payload = {\n    data: {\n      categoryId,\n      category: newCategory,\n      description: state.productName,\n      imgAlt,\n      imgTitle,\n      image: state.image,\n      price,\n      counter: 1,\n      inStock\n    }\n  };\n\n  try {\n    const response = await axios.post(`${serverUrl}${newProduct}`, {\n      payload,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    const result = response.data;\n    setClassErrorById('.errorNewImage', 'errorNewImage -disabled');\n    return result;\n  } catch (error) {\n    setClassErrorById('.errorNewImage', 'errorNewImage');\n    return null;\n  }\n}\n\nexport default postNewProduct;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/api/post/postNewProduct.jsx"],"names":["axios","serverUrl","transliterate","setClassErrorById","newProduct","postNewProduct","state","imgAlt","productName","imgTitle","newCategory","categoryName","categoriesArray","categories","category","categoryId","filter","map","id","join","Number","price","productPrice","slice","inStock","productInStock","Boolean","payload","data","description","image","counter","response","post","headers","result","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AAEA,MAAMC,UAAU,GAAG,cAAnB;;AAEA,eAAeC,cAAf,CACEC,KADF,EAEE;AACA,QAAMC,MAAM,GAAGL,aAAa,CAACI,KAAK,CAACE,WAAP,CAA5B;AACA,QAAMC,QAAQ,GAAGF,MAAjB;AAEA,QAAMG,WAAW,GAAGJ,KAAK,CAACK,YAAN,KAAuB,sBAAvB,GAAgDL,KAAK,CAACM,eAAN,CAAsBC,UAAtB,CAAiC,CAAjC,EAAoCC,QAApF,GAA+FR,KAAK,CAACK,YAAzH;AAEA,MAAII,UAAU,GAAGT,KAAK,CAACM,eAAN,CAAsBC,UAAtB,CACdG,MADc,CACNF,QAAD,IAAcA,QAAQ,CAACA,QAAT,KAAsBJ,WAD7B,EAEdO,GAFc,CAETH,QAAD,IAAcA,QAAQ,CAACI,EAFb,EAEiBC,IAFjB,CAEsB,EAFtB,CAAjB;AAIAJ,EAAAA,UAAU,GAAGK,MAAM,CAACL,UAAD,CAAnB;AAEA,MAAIM,KAAK,GAAG,EAAZ;;AAEA,MAAIf,KAAK,CAACgB,YAAN,CAAmBC,KAAnB,CAAyB,CAAC,CAA1B,MAAiC,GAArC,EAA0C;AACxCF,IAAAA,KAAK,GAAGf,KAAK,CAACgB,YAAN,CAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAAR;AACD;;AAED,QAAMC,OAAO,GAAGlB,KAAK,CAACmB,cAAN,KAAyB,IAAzB,GAAgCC,OAAO,CAAC,IAAD,CAAvC,GAAgDA,OAAO,CAAC,KAAD,CAAvE;AAEA,QAAMC,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE;AACJb,MAAAA,UADI;AAEJD,MAAAA,QAAQ,EAAEJ,WAFN;AAGJmB,MAAAA,WAAW,EAAEvB,KAAK,CAACE,WAHf;AAIJD,MAAAA,MAJI;AAKJE,MAAAA,QALI;AAMJqB,MAAAA,KAAK,EAAExB,KAAK,CAACwB,KANT;AAOJT,MAAAA,KAPI;AAQJU,MAAAA,OAAO,EAAE,CARL;AASJP,MAAAA;AATI;AADQ,GAAhB;;AAcA,MAAI;AACF,UAAMQ,QAAQ,GAAG,MAAMhC,KAAK,CAACiC,IAAN,CAAY,GAAEhC,SAAU,GAAEG,UAAW,EAArC,EAAwC;AAC7DuB,MAAAA,OAD6D;AAE7DO,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFoD,KAAxC,CAAvB;AAMA,UAAMC,MAAM,GAAGH,QAAQ,CAACJ,IAAxB;AACAzB,IAAAA,iBAAiB,CAAC,gBAAD,EAAmB,yBAAnB,CAAjB;AACA,WAAOgC,MAAP;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACdjC,IAAAA,iBAAiB,CAAC,gBAAD,EAAmB,eAAnB,CAAjB;AACA,WAAO,IAAP;AACD;AACF;;AAED,eAAeE,cAAf","sourcesContent":["import axios from 'axios';\nimport serverUrl from '../../../../common/constants/urls';\nimport transliterate from '../../../../common/untils/transliterate';\nimport setClassErrorById from '../../../../common/untils/setClassErrorById';\n\nconst newProduct = '/add-product';\n\nasync function postNewProduct(\n  state,\n) {\n  const imgAlt = transliterate(state.productName);\n  const imgTitle = imgAlt;\n\n  const newCategory = state.categoryName === 'Электротовары и свет' ? state.categoriesArray.categories[0].category : state.categoryName;\n\n  let categoryId = state.categoriesArray.categories\n    .filter((category) => category.category === newCategory)\n    .map((category) => category.id).join('');\n\n  categoryId = Number(categoryId);\n\n  let price = '';\n\n  if (state.productPrice.slice(-1) === '.') {\n    price = state.productPrice.slice(0, -5);\n  }\n\n  const inStock = state.productInStock === 'да' ? Boolean(true) : Boolean(false);\n\n  const payload = {\n    data: {\n      categoryId,\n      category: newCategory,\n      description: state.productName,\n      imgAlt,\n      imgTitle,\n      image: state.image,\n      price,\n      counter: 1,\n      inStock,\n    },\n  };\n\n  try {\n    const response = await axios.post(`${serverUrl}${newProduct}`, {\n      payload,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    const result = response.data;\n    setClassErrorById('.errorNewImage', 'errorNewImage -disabled');\n    return result;\n  } catch (error) {\n    setClassErrorById('.errorNewImage', 'errorNewImage');\n    return null;\n  }\n}\n\nexport default postNewProduct;\n"]},"metadata":{},"sourceType":"module"}