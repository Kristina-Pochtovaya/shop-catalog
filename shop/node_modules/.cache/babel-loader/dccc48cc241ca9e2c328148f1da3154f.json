{"ast":null,"code":"var _jsxFileName = \"/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/personalAccount/components/PhotoComponent.jsx\";\n\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport personalAccount from '../../../assets/personal-account/personal-account.jpg';\nimport { ADDPHOTO } from '../../../redux/actions/loginPersonalAccountActions';\nimport postUserPhoto from '../api/post/postUserPhotoRequest';\nimport getUserPhoto from '../api/get/getUserPhotoRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImageUpload extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      pages\n    } = this.props;\n    this.state = {\n      imagePreviewUrl: ''\n    };\n    this.updateData = this.updateData.bind(this);\n  }\n\n  componentDidMount() {\n    async function handleOnLoad(e) {\n      const result = await getUserPhoto(this.updateData);\n      console.log('Hi');\n      console.log(result);\n    }\n\n    handleOnLoad();\n  }\n\n  handleSubmit(e) {\n    this.e.preventDefault();\n  }\n\n  handleImageChange(e) {\n    e.preventDefault();\n    const reader = new FileReader();\n    const file = e.target.files[0];\n\n    if (file) {\n      reader.onloadend = async () => {\n        this.setState({\n          imagePreviewUrl: reader.result\n        });\n        /*         this.props.onAddPhoto(this.state.imagePreviewUrl); */\n\n        await postUserPhoto(this.props.pages.loginPersonalAccountReducer.clientEmail, this.state.imagePreviewUrl);\n      };\n\n      reader.readAsDataURL(file);\n    }\n  }\n\n  updateData(value) {\n    this.setState({\n      imagePreviewUrl: value\n    });\n  }\n\n  render() {\n    const {\n      imagePreviewUrl\n    } = this.state;\n    const {\n      pages,\n      onAddPhoto\n    } = this.props;\n    /*     console.log(pages.loginPersonalAccountReducer); */\n\n    let $imagePreview = null;\n    /*     async function handleOnLoad(e) {\n      const result = await postUserPhoto(\n        pages.loginPersonalAccountReducer.clientEmail, imagePreviewUrl,\n      );\n      this.setState({ imagePreviewUrl: result.data });\n    } */\n\n    /*   handleOnLoad(); */\n\n    if (imagePreviewUrl) {\n      $imagePreview = /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePreviewUrl,\n        className: \"photoPersonalAccount\",\n        title: \"photoPersonalAccount\",\n        alt: \"photoPersonalAccount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    } else {\n      $imagePreview = /*#__PURE__*/_jsxDEV(\"img\", {\n        src: personalAccount,\n        title: \"photoPersonalAccount\",\n        alt: \"photoPersonalAccount\",\n        className: \"photoPersonalAccount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"previewComponent\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => this.handleSubmit(e),\n        id: \"upload-container\",\n        children: [$imagePreview, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imgPreview\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"avatar\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"choosePhotoButton\",\n              children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0444\\u043E\\u0442\\u043E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"avatar\",\n              name: \"avatar\",\n              className: \"avatar\",\n              type: \"file\",\n              onChange: async e => {\n                this.handleImageChange(e);\n                await postUserPhoto(pages.loginPersonalAccountReducer.clientEmail, imagePreviewUrl);\n              },\n              multiple: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst ConnectedImageUpload = connect(state => ({\n  pages: state\n}), dispatch => ({\n  onAddPhoto: photo => dispatch({\n    type: ADDPHOTO.type,\n    payload: {\n      photo\n    }\n  })\n}))(ImageUpload);\nexport default ConnectedImageUpload;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/personalAccount/components/PhotoComponent.jsx"],"names":["React","connect","personalAccount","ADDPHOTO","postUserPhoto","getUserPhoto","ImageUpload","Component","constructor","props","pages","state","imagePreviewUrl","updateData","bind","componentDidMount","handleOnLoad","e","result","console","log","handleSubmit","preventDefault","handleImageChange","reader","FileReader","file","target","files","onloadend","setState","loginPersonalAccountReducer","clientEmail","readAsDataURL","value","render","onAddPhoto","$imagePreview","ConnectedImageUpload","dispatch","photo","type","payload"],"mappings":"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","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport personalAccount from '../../../assets/personal-account/personal-account.jpg';\nimport { ADDPHOTO } from '../../../redux/actions/loginPersonalAccountActions';\nimport postUserPhoto from '../api/post/postUserPhotoRequest';\nimport getUserPhoto from '../api/get/getUserPhotoRequest';\n\nclass ImageUpload extends React.Component {\n  constructor(props) {\n    super(props);\n    const { pages } = this.props;\n    this.state = {\n      imagePreviewUrl: '',\n    };\n    this.updateData = this.updateData.bind(this);\n  }\n\n  componentDidMount() {\n    async function handleOnLoad(e) {\n      const result = await getUserPhoto(\n        this.updateData,\n      );\n      console.log('Hi');\n      console.log(result);\n    }\n    handleOnLoad()\n  }\n\n  handleSubmit(e) {\n    this.e.preventDefault();\n  }\n\n  handleImageChange(e) {\n    e.preventDefault();\n\n    const reader = new FileReader();\n    const file = e.target.files[0];\n\n    if (file) {\n      reader.onloadend = async () => {\n        this.setState({\n          imagePreviewUrl: reader.result,\n        });\n        /*         this.props.onAddPhoto(this.state.imagePreviewUrl); */\n        await postUserPhoto(\n          this.props.pages.loginPersonalAccountReducer.clientEmail,\n          this.state.imagePreviewUrl,\n        );\n      };\n\n      reader.readAsDataURL(file);\n    }\n  }\n\n  updateData(value) {\n    this.setState({ imagePreviewUrl: value });\n  }\n\n  render() {\n    const { imagePreviewUrl } = this.state;\n    const { pages, onAddPhoto } = this.props;\n    /*     console.log(pages.loginPersonalAccountReducer); */\n    let $imagePreview = null;\n\n    /*     async function handleOnLoad(e) {\n      const result = await postUserPhoto(\n        pages.loginPersonalAccountReducer.clientEmail, imagePreviewUrl,\n      );\n      this.setState({ imagePreviewUrl: result.data });\n    } */\n    /*   handleOnLoad(); */\n    if (imagePreviewUrl) {\n      $imagePreview = (\n        <img\n          src={imagePreviewUrl}\n          className=\"photoPersonalAccount\"\n          title=\"photoPersonalAccount\"\n          alt=\"photoPersonalAccount\"\n        />\n      );\n    } else {\n      $imagePreview = (\n        <img\n          src={personalAccount}\n          title=\"photoPersonalAccount\"\n          alt=\"photoPersonalAccount\"\n          className=\"photoPersonalAccount\"\n        />\n      );\n    }\n    return (\n      <div className=\"previewComponent\">\n        <form onSubmit={(e) => this.handleSubmit(e)} id=\"upload-container\">\n          {$imagePreview}\n          <div className=\"imgPreview\">\n            <label htmlFor=\"avatar\">\n              <p\n                className=\"choosePhotoButton\"\n              >\n                Выберите фото\n              </p>\n              <input\n                id=\"avatar\"\n                name=\"avatar\"\n                className=\"avatar\"\n                type=\"file\"\n                onChange={async (e) => {\n                  this.handleImageChange(e);\n                  await postUserPhoto(\n                    pages.loginPersonalAccountReducer.clientEmail, imagePreviewUrl,\n                  );\n                }}\n                multiple\n              />\n            </label>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst ConnectedImageUpload = connect(\n  (state) => ({\n    pages: state,\n  }),\n  (dispatch) => ({\n    onAddPhoto: (photo) => dispatch({\n      type: ADDPHOTO.type,\n      payload: { photo },\n    }),\n  }),\n)(ImageUpload);\n\nexport default ConnectedImageUpload;\n"]},"metadata":{},"sourceType":"module"}