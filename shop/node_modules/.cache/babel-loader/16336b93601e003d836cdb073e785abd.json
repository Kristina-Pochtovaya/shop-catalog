{"ast":null,"code":"import postRequestMultipartFormData from '../../../../common/api/post/postRequestMultipartFormData';\nimport transliterate from '../../../../common/untils/transliterate';\nimport setClassErrorById from '../../../../common/untils/setClassErrorById';\nconst newProduct = '/add-productd';\n\nasync function postNewProduct(state) {\n  const imgAlt = transliterate(state.productName);\n  const imgTitle = imgAlt;\n  const newCategory = state.categoryName === 'Электротовары и свет' ? state.categoriesArray.categories[0].category : state.categoryName;\n  let categoryId = state.categoriesArray.categories.filter(category => category.category === newCategory).map(category => category.id).join('');\n  categoryId = Number(categoryId);\n  let price = '';\n\n  if (state.productPrice.slice(-1) === '.') {\n    price = state.productPrice.slice(0, -5);\n  }\n\n  const inStock = state.productInStock === 'да' ? Boolean(true) : Boolean(false);\n  const payload = {\n    categoryId,\n    category: newCategory,\n    description: state.productName,\n    imgAlt,\n    imgTitle,\n    image: state.image,\n    price,\n    counter: 1,\n    inStock\n  };\n\n  try {\n    const response = await postRequestMultipartFormData(newProduct, payload);\n    const result = response;\n    setClassErrorById('errorNewImage', 'errorNewImage -disabled');\n    return true;\n  } catch (error) {\n    setClassErrorById('errorNewImage', 'errorNewImage');\n    return null;\n  }\n}\n\nexport default postNewProduct;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/api/post/postNewProduct.jsx"],"names":["postRequestMultipartFormData","transliterate","setClassErrorById","newProduct","postNewProduct","state","imgAlt","productName","imgTitle","newCategory","categoryName","categoriesArray","categories","category","categoryId","filter","map","id","join","Number","price","productPrice","slice","inStock","productInStock","Boolean","payload","description","image","counter","response","result","error"],"mappings":"AAAA,OAAOA,4BAAP,MAAyC,0DAAzC;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AAEA,MAAMC,UAAU,GAAG,eAAnB;;AAEA,eAAeC,cAAf,CAA8BC,KAA9B,EAAqC;AACnC,QAAMC,MAAM,GAAGL,aAAa,CAACI,KAAK,CAACE,WAAP,CAA5B;AACA,QAAMC,QAAQ,GAAGF,MAAjB;AAEA,QAAMG,WAAW,GAAGJ,KAAK,CAACK,YAAN,KAAuB,sBAAvB,GAAgDL,KAAK,CAACM,eAAN,CAAsBC,UAAtB,CAAiC,CAAjC,EAAoCC,QAApF,GAA+FR,KAAK,CAACK,YAAzH;AAEA,MAAII,UAAU,GAAGT,KAAK,CAACM,eAAN,CAAsBC,UAAtB,CACdG,MADc,CACNF,QAAD,IAAcA,QAAQ,CAACA,QAAT,KAAsBJ,WAD7B,EAEdO,GAFc,CAETH,QAAD,IAAcA,QAAQ,CAACI,EAFb,EAEiBC,IAFjB,CAEsB,EAFtB,CAAjB;AAIAJ,EAAAA,UAAU,GAAGK,MAAM,CAACL,UAAD,CAAnB;AAEA,MAAIM,KAAK,GAAG,EAAZ;;AAEA,MAAIf,KAAK,CAACgB,YAAN,CAAmBC,KAAnB,CAAyB,CAAC,CAA1B,MAAiC,GAArC,EAA0C;AACxCF,IAAAA,KAAK,GAAGf,KAAK,CAACgB,YAAN,CAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAAR;AACD;;AAED,QAAMC,OAAO,GAAGlB,KAAK,CAACmB,cAAN,KAAyB,IAAzB,GAAgCC,OAAO,CAAC,IAAD,CAAvC,GAAgDA,OAAO,CAAC,KAAD,CAAvE;AAEA,QAAMC,OAAO,GAAG;AACdZ,IAAAA,UADc;AAEdD,IAAAA,QAAQ,EAAEJ,WAFI;AAGdkB,IAAAA,WAAW,EAAEtB,KAAK,CAACE,WAHL;AAIdD,IAAAA,MAJc;AAKdE,IAAAA,QALc;AAMdoB,IAAAA,KAAK,EAAEvB,KAAK,CAACuB,KANC;AAOdR,IAAAA,KAPc;AAQdS,IAAAA,OAAO,EAAE,CARK;AASdN,IAAAA;AATc,GAAhB;;AAYA,MAAI;AACF,UAAMO,QAAQ,GAAG,MAAM9B,4BAA4B,CAACG,UAAD,EAAauB,OAAb,CAAnD;AACA,UAAMK,MAAM,GAAGD,QAAf;AACA5B,IAAAA,iBAAiB,CAAC,eAAD,EAAkB,yBAAlB,CAAjB;AACA,WAAO,IAAP;AACD,GALD,CAKE,OAAO8B,KAAP,EAAc;AACd9B,IAAAA,iBAAiB,CAAC,eAAD,EAAkB,eAAlB,CAAjB;AACA,WAAO,IAAP;AACD;AACF;;AAED,eAAeE,cAAf","sourcesContent":["import postRequestMultipartFormData from '../../../../common/api/post/postRequestMultipartFormData';\nimport transliterate from '../../../../common/untils/transliterate';\nimport setClassErrorById from '../../../../common/untils/setClassErrorById';\n\nconst newProduct = '/add-productd';\n\nasync function postNewProduct(state) {\n  const imgAlt = transliterate(state.productName);\n  const imgTitle = imgAlt;\n\n  const newCategory = state.categoryName === 'Электротовары и свет' ? state.categoriesArray.categories[0].category : state.categoryName;\n\n  let categoryId = state.categoriesArray.categories\n    .filter((category) => category.category === newCategory)\n    .map((category) => category.id).join('');\n\n  categoryId = Number(categoryId);\n\n  let price = '';\n\n  if (state.productPrice.slice(-1) === '.') {\n    price = state.productPrice.slice(0, -5);\n  }\n\n  const inStock = state.productInStock === 'да' ? Boolean(true) : Boolean(false);\n\n  const payload = {\n    categoryId,\n    category: newCategory,\n    description: state.productName,\n    imgAlt,\n    imgTitle,\n    image: state.image,\n    price,\n    counter: 1,\n    inStock,\n  };\n\n  try {\n    const response = await postRequestMultipartFormData(newProduct, payload);\n    const result = response;\n    setClassErrorById('errorNewImage', 'errorNewImage -disabled');\n    return true;\n  } catch (error) {\n    setClassErrorById('errorNewImage', 'errorNewImage');\n    return null;\n  }\n}\n\nexport default postNewProduct;\n"]},"metadata":{},"sourceType":"module"}