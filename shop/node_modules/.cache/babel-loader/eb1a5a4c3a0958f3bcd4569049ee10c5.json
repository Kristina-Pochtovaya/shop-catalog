{"ast":null,"code":"import _regeneratorRuntime from\"/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var processResultChangePassword=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(clientEmail,passwordNew,passwordNewRepeat,history,setClassErrorById,postChangePasswordRequest){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return postChangePasswordRequest(clientEmail,passwordNew,passwordNewRepeat);case 2:result=_context.sent;if(result===true){history.push('/main-page');}if(result==='incorrectUserOrPassword'){setClassErrorById('notRealUser','userNotFoundBlock');}case 5:case\"end\":return _context.stop();}}},_callee);}));return function processResultChangePassword(_x,_x2,_x3,_x4,_x5,_x6){return _ref.apply(this,arguments);};}();export default processResultChangePassword;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/changePassword/utils/processResultChangePassword.jsx"],"names":["processResultChangePassword","clientEmail","passwordNew","passwordNewRepeat","history","setClassErrorById","postChangePasswordRequest","result","push"],"mappings":"iZAAA,GAAMA,CAAAA,2BAA2B,0FAAG,iBAClCC,WADkC,CACrBC,WADqB,CACRC,iBADQ,CACWC,OADX,CACoBC,iBADpB,CAElCC,yBAFkC,mJAIbA,CAAAA,yBAAyB,CAACL,WAAD,CAAcC,WAAd,CAA2BC,iBAA3B,CAJZ,QAI5BI,MAJ4B,eAKlC,GAAIA,MAAM,GAAK,IAAf,CAAqB,CACnBH,OAAO,CAACI,IAAR,CAAa,YAAb,EACD,CAAC,GAAID,MAAM,GAAK,yBAAf,CAA0C,CAC1CF,iBAAiB,CAAC,aAAD,CAAgB,mBAAhB,CAAjB,CACD,CATiC,sDAAH,kBAA3BL,CAAAA,2BAA2B,gEAAjC,CAYA,cAAeA,CAAAA,2BAAf","sourcesContent":["const processResultChangePassword = async (\n  clientEmail, passwordNew, passwordNewRepeat, history, setClassErrorById,\n  postChangePasswordRequest,\n) => {\n  const result = await postChangePasswordRequest(clientEmail, passwordNew, passwordNewRepeat);\n  if (result === true) {\n    history.push('/main-page');\n  } if (result === 'incorrectUserOrPassword') {\n    setClassErrorById('notRealUser', 'userNotFoundBlock');\n  }\n};\n\nexport default processResultChangePassword;\n"]},"metadata":{},"sourceType":"module"}