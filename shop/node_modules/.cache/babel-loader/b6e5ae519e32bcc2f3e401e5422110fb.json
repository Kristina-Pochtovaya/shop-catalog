{"ast":null,"code":"var _jsxFileName = \"/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/components/EditProductsPageColumnsComponent.jsx\";\nimport React from 'react';\nimport getProducts from '../api/get/getProducts';\nimport getCategories from '../../editCategory/api/get/getCategories';\nimport PopUpErrorLoading from '../../../common/popup/components/PopUpErrorLoadingComponent';\nimport IsEditActiveColumnsComponent from './IsEditActiveColumnsComponent';\nimport IsEditNotActiveColumnsComponent from './IsEditNotActiveColumnsComponent';\nimport postDeleteProduct from '../api/post/postDeleteProduct';\nimport postProducts from '../api/post/postProducts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass EditProductsPageColumns extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.handleButtonOnClick = async (product, category = false) => {\n      const {\n        isProductsUpdated,\n        setIsProductsUpdated\n      } = this.props;\n\n      if (!category) {\n        await postProducts(this.state);\n        this.updateData(true, this.state, product);\n        isProductsUpdated ? setIsProductsUpdated(false) : setIsProductsUpdated(true);\n      } else {\n        this.updateData(false, this.state, product, category);\n      }\n    };\n\n    this.updateData = (save, state, product, category) => {\n      this.setState({\n        isUpdated: save ? !state.isUpdated : state.isUpdated,\n        isEditActive: !save,\n        isEditActiveId: product.id,\n        IsSaveButtonVisible: !!save,\n        IsEditButtonVisible: !save,\n        productImage: product.image,\n        productCategory: save ? state.productCategory : category.category,\n        productName: save ? state.productName : product.description,\n        productPrice: save ? state.productPrice : product.price,\n        productInStock: save ? state.productInStock : product.inStock\n      });\n    };\n\n    this.setError = errorMessage => this.setState({\n      ErrorMessageProducts: errorMessage\n    });\n\n    this.setpopupSmthWentWrongActive = value => this.setState({\n      popupSmthWentWrongActive: value\n    });\n\n    this.setEditActive = value => this.setState({\n      isEditActive: value\n    });\n\n    this.updateImage = value => this.setState({\n      productImage: value\n    });\n\n    this.updateProductCategory = (value, array) => {\n      this.setState({\n        productCategory: value,\n        categoriesArray: array\n      });\n    };\n\n    this.updateProductName = value => this.setState({\n      productName: value\n    });\n\n    this.updateProductPrice = value => this.setState({\n      productPrice: value\n    });\n\n    this.updateProductInStock = value => this.setState({\n      productInStock: value\n    });\n\n    this.updateProducts = (value, valueIsLoading) => {\n      if (this._isMounted) {\n        this.setState({\n          productsArray: value,\n          isLoadingProducts: valueIsLoading\n        });\n      }\n    };\n\n    this.updateDataCategories = (value, valueIsLoading) => {\n      if (this._isMounted) {\n        this.setState({\n          categoriesArray: value.categories,\n          isLoadingCategories: valueIsLoading\n        });\n      }\n    };\n\n    this.updateAfterDelete = () => {\n      const {\n        isUpdated\n      } = this.state;\n      this.setState({\n        isUpdated: !isUpdated\n      });\n    };\n\n    this.state = {\n      productsArray: [],\n      isEditActive: false,\n      isEditActiveId: '',\n      isUpdated: false,\n      isLoadingProducts: false,\n      isLoadingCategories: false,\n      ErrorMessageProducts: '',\n      popupSmthWentWrongActive: true,\n      IsSaveButtonVisible: false,\n      IsEditButtonVisible: true,\n      productImage: '',\n      productCategory: '',\n      productName: '',\n      productPrice: '',\n      productInStock: 1,\n      categoriesArray: []\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await getProducts(this.updateProducts, this.setError);\n    await getCategories(this.updateDataCategories);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const {\n      isUpdated\n    } = this.state;\n\n    if (prevState.isUpdated !== isUpdated) {\n      await getProducts(this.updateProducts, this.setError);\n      await getCategories(this.updateDataCategories);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      isEditActive,\n      isEditActiveId,\n      ErrorMessageProducts,\n      popupSmthWentWrongActive,\n      productsArray,\n      isLoadingProducts,\n      IsSaveButtonVisible,\n      IsEditButtonVisible,\n      isLoadingCategories,\n      isUpdated,\n      categoriesArray\n    } = this.state;\n    const {\n      isProductsUpdated,\n      setIsProductsUpdated\n    } = this.props;\n\n    if (!isLoadingProducts || !isLoadingCategories) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"-isLoading\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (ErrorMessageProducts) {\n      return /*#__PURE__*/_jsxDEV(PopUpErrorLoading, {\n        popupSmthWentWrongActive: popupSmthWentWrongActive,\n        setpopupSmthWentWrongActive: this.setpopupSmthWentWrongActive\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: productsArray.products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"columns\",\n          children: [isEditActive && product.id === isEditActiveId ? /*#__PURE__*/_jsxDEV(IsEditActiveColumnsComponent, {\n            product: product,\n            categoriesArray: categoriesArray,\n            updateImage: this.updateImage,\n            updateProductCategory: this.updateProductCategory,\n            updateProductName: this.updateProductName,\n            updateProductPrice: this.updateProductPrice,\n            updateProductInStock: this.updateProductInStock\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(IsEditNotActiveColumnsComponent, {\n            product: product,\n            categoriesArray: categoriesArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"columnEdit\",\n            children: IsEditButtonVisible && isEditActive && product.id === isEditActiveId ? /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"editProductsButton\",\n              onClick: () => this.handleButtonOnClick(product),\n              children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 19\n            }, this) : categoriesArray.map(category => product.categoryId === category.id && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"editProductsButton\",\n              onClick: () => this.handleButtonOnClick(product, category),\n              children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n            }, product.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"columnDelete\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"deleteProductsButton\",\n              onClick: () => {\n                postDeleteProduct(product.id, setIsProductsUpdated, isProductsUpdated, this.updateAfterDelete);\n              },\n              children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this))\n    }, void 0, false);\n  }\n\n}\n\nexport default EditProductsPageColumns;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/components/EditProductsPageColumnsComponent.jsx"],"names":["React","getProducts","getCategories","PopUpErrorLoading","IsEditActiveColumnsComponent","IsEditNotActiveColumnsComponent","postDeleteProduct","postProducts","EditProductsPageColumns","Component","constructor","props","_isMounted","handleButtonOnClick","product","category","isProductsUpdated","setIsProductsUpdated","state","updateData","save","setState","isUpdated","isEditActive","isEditActiveId","id","IsSaveButtonVisible","IsEditButtonVisible","productImage","image","productCategory","productName","description","productPrice","price","productInStock","inStock","setError","errorMessage","ErrorMessageProducts","setpopupSmthWentWrongActive","value","popupSmthWentWrongActive","setEditActive","updateImage","updateProductCategory","array","categoriesArray","updateProductName","updateProductPrice","updateProductInStock","updateProducts","valueIsLoading","productsArray","isLoadingProducts","updateDataCategories","categories","isLoadingCategories","updateAfterDelete","componentDidMount","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","products","map","categoryId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport getProducts from '../api/get/getProducts';\nimport getCategories from '../../editCategory/api/get/getCategories';\nimport PopUpErrorLoading from '../../../common/popup/components/PopUpErrorLoadingComponent';\nimport IsEditActiveColumnsComponent from './IsEditActiveColumnsComponent';\nimport IsEditNotActiveColumnsComponent from './IsEditNotActiveColumnsComponent';\nimport postDeleteProduct from '../api/post/postDeleteProduct';\nimport postProducts from '../api/post/postProducts';\n\nclass EditProductsPageColumns extends React.Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      productsArray: [],\n      isEditActive: false,\n      isEditActiveId: '',\n      isUpdated: false,\n      isLoadingProducts: false,\n      isLoadingCategories: false,\n      ErrorMessageProducts: '',\n      popupSmthWentWrongActive: true,\n      IsSaveButtonVisible: false,\n      IsEditButtonVisible: true,\n      productImage: '',\n      productCategory: '',\n      productName: '',\n      productPrice: '',\n      productInStock: 1,\n      categoriesArray: [],\n    };\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await getProducts(this.updateProducts, this.setError);\n    await getCategories(this.updateDataCategories);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const { isUpdated } = this.state;\n    if (prevState.isUpdated !== isUpdated) {\n      await getProducts(this.updateProducts, this.setError);\n      await getCategories(this.updateDataCategories);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n   handleButtonOnClick = async (product, category = false) => {\n     const { isProductsUpdated, setIsProductsUpdated } = this.props;\n     if (!category) {\n       await postProducts(this.state);\n       this.updateData(true, this.state, product);\n       isProductsUpdated ? setIsProductsUpdated(false) : setIsProductsUpdated(true);\n     } else {\n       this.updateData(false, this.state, product, category);\n     }\n   }\n\n  updateData = (save, state,\n    product, category) => {\n    this.setState({\n      isUpdated: save ? !state.isUpdated : state.isUpdated,\n      isEditActive: !save,\n      isEditActiveId: product.id,\n      IsSaveButtonVisible: !!save,\n      IsEditButtonVisible: !save,\n      productImage: product.image,\n      productCategory: save ? state.productCategory : category.category,\n      productName: save ? state.productName : product.description,\n      productPrice: save ? state.productPrice : product.price,\n      productInStock: save ? state.productInStock : product.inStock,\n    });\n  }\n\n  setError = (errorMessage) => this.setState({ ErrorMessageProducts: errorMessage });\n\n  setpopupSmthWentWrongActive = (value) => this.setState({ popupSmthWentWrongActive: value });\n\n  setEditActive = (value) => this.setState({ isEditActive: value });\n\n  updateImage = (value) => this.setState({ productImage: value });\n\n  updateProductCategory = (value, array) => {\n    this.setState({ productCategory: value, categoriesArray: array });\n  }\n\n  updateProductName = (value) => this.setState({ productName: value });\n\n  updateProductPrice = (value) => this.setState({ productPrice: value });\n\n  updateProductInStock = (value) => this.setState({ productInStock: value });\n\n  updateProducts = (value, valueIsLoading) => {\n    if (this._isMounted) {\n      this.setState({\n        productsArray: value,\n        isLoadingProducts: valueIsLoading,\n      });\n    }\n  }\n\n  updateDataCategories = (value, valueIsLoading) => {\n    if (this._isMounted) {\n      this.setState({\n        categoriesArray: value.categories,\n        isLoadingCategories: valueIsLoading,\n      });\n    }\n  }\n\n  updateAfterDelete = () => {\n    const { isUpdated } = this.state;\n    this.setState({ isUpdated: !isUpdated });\n  }\n\n  render() {\n    const {\n      isEditActive, isEditActiveId, ErrorMessageProducts, popupSmthWentWrongActive,\n      productsArray, isLoadingProducts, IsSaveButtonVisible, IsEditButtonVisible,\n      isLoadingCategories, isUpdated, categoriesArray,\n    } = this.state;\n    const { isProductsUpdated, setIsProductsUpdated } = this.props;\n    if (!isLoadingProducts || !isLoadingCategories) {\n      return <div className=\"-isLoading\"> </div>;\n    }\n    if (ErrorMessageProducts) {\n      return (\n        <PopUpErrorLoading\n          popupSmthWentWrongActive={popupSmthWentWrongActive}\n          setpopupSmthWentWrongActive={this.setpopupSmthWentWrongActive}\n        />\n      );\n    }\n    return (\n      <>\n        {productsArray.products.map((product) => (\n          <li key={product.id}>\n            <div className=\"columns\">\n              {isEditActive && product.id === isEditActiveId\n                ? (\n                  <IsEditActiveColumnsComponent\n                    product={product}\n                    categoriesArray={categoriesArray}\n                    updateImage={this.updateImage}\n                    updateProductCategory={this.updateProductCategory}\n                    updateProductName={this.updateProductName}\n                    updateProductPrice={this.updateProductPrice}\n                    updateProductInStock={this.updateProductInStock}\n                  />\n                ) : (\n                  <IsEditNotActiveColumnsComponent\n                    product={product}\n                    categoriesArray={categoriesArray}\n                  />\n                )}\n              <div className=\"columnEdit\">\n                {IsEditButtonVisible && isEditActive && product.id === isEditActiveId ? (\n                  <button\n                    type=\"button\"\n                    className=\"editProductsButton\"\n                    onClick={() => this.handleButtonOnClick(product)}\n                  >\n                    Сохранить\n                  </button>\n                ) : (\n                  categoriesArray.map((category) => (\n                    product.categoryId === category.id\n                    && (\n                    <button\n                      key={product.id}\n                      type=\"button\"\n                      className=\"editProductsButton\"\n                      onClick={() => this.handleButtonOnClick(product, category)}\n                    >\n                      Изменить\n                    </button>\n                    )))\n                )}\n              </div>\n              <div className=\"columnDelete\">\n                <button\n                  type=\"button\"\n                  className=\"deleteProductsButton\"\n                  onClick={() => {\n                    postDeleteProduct(product.id, setIsProductsUpdated,\n                      isProductsUpdated, this.updateAfterDelete);\n                  }}\n                >\n                  Удалить\n                </button>\n              </div>\n            </div>\n          </li>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default EditProductsPageColumns;\n"]},"metadata":{},"sourceType":"module"}