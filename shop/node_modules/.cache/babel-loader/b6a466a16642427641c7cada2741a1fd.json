{"ast":null,"code":"var _jsxFileName = \"/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/components/EditProductsPageColumnsComponent.jsx\";\nimport React from 'react';\nimport getProducts from '../api/get/getProducts';\nimport getCategories from '../../editCategory/api/get/getCategories';\nimport PopUpErrorLoading from '../../../common/popup/components/PopUpErrorLoadingComponent';\nimport IsEditActiveColumnsComponent from './IsEditActiveColumnsComponent';\nimport IsEditNotActiveColumnsComponent from './IsEditNotActiveColumnsComponent';\nimport processHandleButtonOnEdit from '../utils/processHandleButtonOnEdit';\nimport ButtonEditProducts from '../../../common/button/components/ButtonEditProductsComponent';\nimport ButtonDeleteCategoryProducts from '../../../common/button/components/ButtonDeleteCategoryProductsComponent';\nimport updateDataOnClick from '../utils/updateDataOnClick';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditProductsPageColumns extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      productsArray: [{\n        products: [{\n          id: 1,\n          categoryId: 3,\n          category: 'aaБытовая техникаfsss',\n          description: 'Лампа настольная SURPA SL-27'\n        }]\n      }],\n      isEditActive: false,\n      isEditActiveId: '',\n      isUpdated: false,\n      isLoadingProducts: false,\n      isLoadingCategories: false,\n      ErrorMessageProducts: '',\n      popupSmthWentWrongActive: true,\n      IsSaveButtonVisible: false,\n      IsEditButtonVisible: true,\n      productImage: '',\n      productCategory: '',\n      productName: '',\n      productPrice: '',\n      productInStock: 1,\n      categoriesArray: []\n    };\n  }\n  /*   async componentDidMount() {\n    this._isMounted = true;\n    await getProducts(this.updateCategoriesProducts, this.setError);\n    await getCategories(this.updateCategoriesProducts);\n  }\n   async componentDidUpdate(prevProps, prevState) {\n    const { isUpdated } = this.state;\n    if (prevState.isUpdated !== isUpdated) {\n      await getProducts(this.updateCategoriesProducts, this.setError);\n      await getCategories(this.updateCategoriesProducts);\n    }\n  }\n   componentWillUnmount() {\n    this._isMounted = false;\n  }\n  setState = this.setState.bind(this)\n    handleButtonOnClick = async (product, category = false) => {\n     const { isProductsUpdated, setIsProductsUpdated } = this.props;\n     if (!category) {\n       processHandleButtonOnEdit(this.setState, this.state, product, updateDataOnClick,\n         isProductsUpdated, setIsProductsUpdated);\n     } else {\n       updateDataOnClick(this.setState, false, this.state, product, category);\n     }\n   }\n   updateData=(value, name, array = '') => {\n    if (name === 'setError') this.setState({ ErrorMessageProducts: value });\n    if (name === 'updateImage') this.setState({ productImage: value });\n    if (name === 'updateProductName') this.setState({ productName: value });\n    if (name === 'updateProductPrice') this.setState({ productPrice: value });\n    if (name === 'updateProductInStock') this.setState({ productInStock: value });\n    if (name === 'updateProductCategory') this.setState({ productCategory: value, categoriesArray: array });\n  }\n   setpopupSmthWentWrongActive = (value) => this.setState({ popupSmthWentWrongActive: value });\n   updateAfterDelete = () => {\n    const { isUpdated } = this.state;\n    this.setState({ isUpdated: !isUpdated });\n  }\n   updateCategoriesProducts=(value, valueIsLoading, name) => {\n    if (this._isMounted) {\n      if (name === 'updateProducts') this.setState({ productsArray: value, isLoadingProducts: valueIsLoading });\n      if (name === 'updateCategories') this.setState({ categoriesArray: value.categories, isLoadingCategories: valueIsLoading });\n    }\n  } */\n\n\n  render() {\n    const {\n      isEditActive,\n      isEditActiveId,\n      ErrorMessageProducts,\n      popupSmthWentWrongActive,\n      productsArray,\n      isLoadingProducts,\n      IsEditButtonVisible,\n      isLoadingCategories,\n      categoriesArray\n    } = this.state;\n    const {\n      isProductsUpdated,\n      setIsProductsUpdated\n    } = this.props;\n\n    if (!isLoadingProducts || !isLoadingCategories) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"-isLoading\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (ErrorMessageProducts) {\n      return /*#__PURE__*/_jsxDEV(PopUpErrorLoading, {\n        popupSmthWentWrongActive: popupSmthWentWrongActive,\n        setpopupSmthWentWrongActive: this.setpopupSmthWentWrongActive\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d\",\n      children: productsArray.products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"columns\",\n          children: [isEditActive && product.id === isEditActiveId ? /*#__PURE__*/_jsxDEV(IsEditActiveColumnsComponent, {\n            product: product,\n            categoriesArray: categoriesArray,\n            updateData: this.updateData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(IsEditNotActiveColumnsComponent, {\n            product: product,\n            categoriesArray: categoriesArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 19\n          }, this), categoriesArray.map(category => product.categoryId === category.id && /*#__PURE__*/_jsxDEV(ButtonEditProducts, {\n            category: category,\n            product: product,\n            handleButtonOnClick: this.handleButtonOnClick,\n            IsEditButtonVisible: IsEditButtonVisible,\n            isEditActive: isEditActive,\n            isEditActiveId: isEditActiveId\n          }, product.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"columnDelete\",\n            children: /*#__PURE__*/_jsxDEV(ButtonDeleteCategoryProducts, {\n              item: product,\n              category: false,\n              updateAfterDelete: this.updateAfterDelete,\n              setIsProductsUpdated: setIsProductsUpdated,\n              isProductsUpdated: isProductsUpdated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EditProductsPageColumns;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/components/EditProductsPageColumnsComponent.jsx"],"names":["React","getProducts","getCategories","PopUpErrorLoading","IsEditActiveColumnsComponent","IsEditNotActiveColumnsComponent","processHandleButtonOnEdit","ButtonEditProducts","ButtonDeleteCategoryProducts","updateDataOnClick","EditProductsPageColumns","Component","constructor","props","_isMounted","state","productsArray","products","id","categoryId","category","description","isEditActive","isEditActiveId","isUpdated","isLoadingProducts","isLoadingCategories","ErrorMessageProducts","popupSmthWentWrongActive","IsSaveButtonVisible","IsEditButtonVisible","productImage","productCategory","productName","productPrice","productInStock","categoriesArray","render","isProductsUpdated","setIsProductsUpdated","setpopupSmthWentWrongActive","map","product","updateData","handleButtonOnClick","updateAfterDelete"],"mappings":"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","sourcesContent":["import React from 'react';\nimport getProducts from '../api/get/getProducts';\nimport getCategories from '../../editCategory/api/get/getCategories';\nimport PopUpErrorLoading from '../../../common/popup/components/PopUpErrorLoadingComponent';\nimport IsEditActiveColumnsComponent from './IsEditActiveColumnsComponent';\nimport IsEditNotActiveColumnsComponent from './IsEditNotActiveColumnsComponent';\nimport processHandleButtonOnEdit from '../utils/processHandleButtonOnEdit';\nimport ButtonEditProducts from '../../../common/button/components/ButtonEditProductsComponent';\nimport ButtonDeleteCategoryProducts from '../../../common/button/components/ButtonDeleteCategoryProductsComponent';\nimport updateDataOnClick from '../utils/updateDataOnClick';\n\nclass EditProductsPageColumns extends React.Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      productsArray: [{\n        products: [{\n          id: 1,\n          categoryId: 3,\n          category: 'aaБытовая техникаfsss',\n          description: 'Лампа настольная SURPA SL-27',\n        }],\n      }],\n      isEditActive: false,\n      isEditActiveId: '',\n      isUpdated: false,\n      isLoadingProducts: false,\n      isLoadingCategories: false,\n      ErrorMessageProducts: '',\n      popupSmthWentWrongActive: true,\n      IsSaveButtonVisible: false,\n      IsEditButtonVisible: true,\n      productImage: '',\n      productCategory: '',\n      productName: '',\n      productPrice: '',\n      productInStock: 1,\n      categoriesArray: [],\n    };\n  }\n\n  /*   async componentDidMount() {\n    this._isMounted = true;\n    await getProducts(this.updateCategoriesProducts, this.setError);\n    await getCategories(this.updateCategoriesProducts);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const { isUpdated } = this.state;\n    if (prevState.isUpdated !== isUpdated) {\n      await getProducts(this.updateCategoriesProducts, this.setError);\n      await getCategories(this.updateCategoriesProducts);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n setState = this.setState.bind(this)\n\n   handleButtonOnClick = async (product, category = false) => {\n     const { isProductsUpdated, setIsProductsUpdated } = this.props;\n     if (!category) {\n       processHandleButtonOnEdit(this.setState, this.state, product, updateDataOnClick,\n         isProductsUpdated, setIsProductsUpdated);\n     } else {\n       updateDataOnClick(this.setState, false, this.state, product, category);\n     }\n   }\n\n  updateData=(value, name, array = '') => {\n    if (name === 'setError') this.setState({ ErrorMessageProducts: value });\n    if (name === 'updateImage') this.setState({ productImage: value });\n    if (name === 'updateProductName') this.setState({ productName: value });\n    if (name === 'updateProductPrice') this.setState({ productPrice: value });\n    if (name === 'updateProductInStock') this.setState({ productInStock: value });\n    if (name === 'updateProductCategory') this.setState({ productCategory: value, categoriesArray: array });\n  }\n\n  setpopupSmthWentWrongActive = (value) => this.setState({ popupSmthWentWrongActive: value });\n\n  updateAfterDelete = () => {\n    const { isUpdated } = this.state;\n    this.setState({ isUpdated: !isUpdated });\n  }\n\n  updateCategoriesProducts=(value, valueIsLoading, name) => {\n    if (this._isMounted) {\n      if (name === 'updateProducts') this.setState({ productsArray: value, isLoadingProducts: valueIsLoading });\n      if (name === 'updateCategories') this.setState({ categoriesArray: value.categories, isLoadingCategories: valueIsLoading });\n    }\n  } */\n\n  render() {\n    const {\n      isEditActive, isEditActiveId, ErrorMessageProducts, popupSmthWentWrongActive, productsArray,\n      isLoadingProducts, IsEditButtonVisible, isLoadingCategories, categoriesArray,\n    } = this.state;\n    const { isProductsUpdated, setIsProductsUpdated } = this.props;\n    if (!isLoadingProducts || !isLoadingCategories) {\n      return <div className=\"-isLoading\"> </div>;\n    }\n    if (ErrorMessageProducts) {\n      return (\n        <PopUpErrorLoading\n          popupSmthWentWrongActive={popupSmthWentWrongActive}\n          setpopupSmthWentWrongActive={this.setpopupSmthWentWrongActive}\n        />\n      );\n    }\n    return (\n      <div className=\"d\">\n        {productsArray.products.map((product) => (\n          <li key={product.id}>\n            <div className=\"columns\">\n              {isEditActive && product.id === isEditActiveId\n                ? (\n                  <IsEditActiveColumnsComponent\n                    product={product}\n                    categoriesArray={categoriesArray}\n                    updateData={this.updateData}\n                  />\n                ) : (\n                  <IsEditNotActiveColumnsComponent\n                    product={product}\n                    categoriesArray={categoriesArray}\n                  />\n                )}\n              { categoriesArray.map((category) => (\n                product.categoryId === category.id && (\n                <ButtonEditProducts\n                  key={product.id}\n                  category={category}\n                  product={product}\n                  handleButtonOnClick={this.handleButtonOnClick}\n                  IsEditButtonVisible={IsEditButtonVisible}\n                  isEditActive={isEditActive}\n                  isEditActiveId={isEditActiveId}\n                />\n                )))}\n              <div className=\"columnDelete\">\n                <ButtonDeleteCategoryProducts\n                  item={product}\n                  category={false}\n                  updateAfterDelete={this.updateAfterDelete}\n                  setIsProductsUpdated={setIsProductsUpdated}\n                  isProductsUpdated={isProductsUpdated}\n                />\n              </div>\n            </div>\n          </li>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default EditProductsPageColumns;\n"]},"metadata":{},"sourceType":"module"}