{"ast":null,"code":"var _jsxFileName = \"/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/components/EditProductsPageColumnsComponent.jsx\";\nimport React from 'react';\nimport getProducts from '../api/get/getProducts';\nimport getCategories from '../../editCategory/api/get/getCategories';\nimport PopUpErrorLoading from '../../../common/popup/components/PopUpErrorLoadingComponent';\nimport IsEditActiveColumnsComponent from './IsEditActiveColumnsComponent';\nimport IsEditNotActiveColumnsComponent from './IsEditNotActiveColumnsComponent';\nimport processHandleButtonOnEdit from '../utils/processHandleButtonOnEdit';\nimport ButtonEditProducts from '../../../common/button/components/ButtonEditProductsComponent';\nimport ButtonDeleteCategoryProducts from '../../../common/button/components/ButtonDeleteCategoryProductsComponent';\nimport updateDataOnClick from '../utils/updateDataOnClick';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass EditProductsPageColumns extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.handleButtonOnClick = async (product, category = false) => {\n      const {\n        isProductsUpdated,\n        setIsProductsUpdated\n      } = this.props;\n\n      if (!category) {\n        processHandleButtonOnEdit(this.state, product, updateDataOnClick.bind(this), isProductsUpdated, setIsProductsUpdated);\n      } else {\n        updateDataOnClick(false, this.state, product, category).bind(this);\n      }\n    };\n\n    this.setError = errorMessage => this.setState({\n      ErrorMessageProducts: errorMessage\n    });\n\n    this.setpopupSmthWentWrongActive = value => this.setState({\n      popupSmthWentWrongActive: value\n    });\n\n    this.setEditActive = value => this.setState({\n      isEditActive: value\n    });\n\n    this.updateImage = value => this.setState({\n      productImage: value\n    });\n\n    this.updateProductCategory = (value, array) => {\n      this.setState({\n        productCategory: value,\n        categoriesArray: array\n      });\n    };\n\n    this.updateProductName = value => this.setState({\n      productName: value\n    });\n\n    this.updateProductPrice = value => this.setState({\n      productPrice: value\n    });\n\n    this.updateProductInStock = value => this.setState({\n      productInStock: value\n    });\n\n    this.updateAfterDelete = () => {\n      const {\n        isUpdated\n      } = this.state;\n      this.setState({\n        isUpdated: !isUpdated\n      });\n    };\n\n    this.updateProducts = (value, valueIsLoading) => {\n      if (this._isMounted) {\n        this.setState({\n          productsArray: value,\n          isLoadingProducts: valueIsLoading\n        });\n      }\n    };\n\n    this.updateDataCategories = (value, valueIsLoading) => {\n      if (this._isMounted) {\n        this.setState({\n          categoriesArray: value.categories,\n          isLoadingCategories: valueIsLoading\n        });\n      }\n    };\n\n    this.state = {\n      productsArray: [],\n      isEditActive: false,\n      isEditActiveId: '',\n      isUpdated: false,\n      isLoadingProducts: false,\n      isLoadingCategories: false,\n      ErrorMessageProducts: '',\n      popupSmthWentWrongActive: true,\n      IsSaveButtonVisible: false,\n      IsEditButtonVisible: true,\n      productImage: '',\n      productCategory: '',\n      productName: '',\n      productPrice: '',\n      productInStock: 1,\n      categoriesArray: []\n    };\n    updateDataOnClick = updateDataOnClick.bind;\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await getProducts(this.updateProducts, this.setError);\n    await getCategories(this.updateDataCategories);\n    console.log(this);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const {\n      isUpdated\n    } = this.state;\n\n    if (prevState.isUpdated !== isUpdated) {\n      await getProducts(this.updateProducts, this.setError);\n      await getCategories(this.updateDataCategories);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      isEditActive,\n      isEditActiveId,\n      ErrorMessageProducts,\n      popupSmthWentWrongActive,\n      productsArray,\n      isLoadingProducts,\n      IsEditButtonVisible,\n      isLoadingCategories,\n      categoriesArray\n    } = this.state;\n    const {\n      isProductsUpdated,\n      setIsProductsUpdated\n    } = this.props;\n\n    if (!isLoadingProducts || !isLoadingCategories) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"-isLoading\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (ErrorMessageProducts) {\n      return /*#__PURE__*/_jsxDEV(PopUpErrorLoading, {\n        popupSmthWentWrongActive: popupSmthWentWrongActive,\n        setpopupSmthWentWrongActive: this.setpopupSmthWentWrongActive\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: productsArray.products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"columns\",\n          children: [isEditActive && product.id === isEditActiveId ? /*#__PURE__*/_jsxDEV(IsEditActiveColumnsComponent, {\n            product: product,\n            categoriesArray: categoriesArray,\n            updateImage: this.updateImage,\n            updateProductCategory: this.updateProductCategory,\n            updateProductName: this.updateProductName,\n            updateProductPrice: this.updateProductPrice,\n            updateProductInStock: this.updateProductInStock\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(IsEditNotActiveColumnsComponent, {\n            product: product,\n            categoriesArray: categoriesArray\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 19\n          }, this), categoriesArray.map(category => product.categoryId === category.id && /*#__PURE__*/_jsxDEV(ButtonEditProducts, {\n            category: category,\n            product: product,\n            handleButtonOnClick: this.handleButtonOnClick,\n            IsEditButtonVisible: IsEditButtonVisible,\n            isEditActive: isEditActive,\n            isEditActiveId: isEditActiveId\n          }, product.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"columnDelete\",\n            children: /*#__PURE__*/_jsxDEV(ButtonDeleteCategoryProducts, {\n              item: product,\n              category: false,\n              updateAfterDelete: this.updateAfterDelete,\n              setIsProductsUpdated: setIsProductsUpdated,\n              isProductsUpdated: isProductsUpdated\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this))\n    }, void 0, false);\n  }\n\n}\n\nexport default EditProductsPageColumns;","map":{"version":3,"sources":["/home/ITRANSITION.CORP/k.pochtovaya/Documents/React Projects/shop catalog/shop/shop/src/pages/editProducts/components/EditProductsPageColumnsComponent.jsx"],"names":["React","getProducts","getCategories","PopUpErrorLoading","IsEditActiveColumnsComponent","IsEditNotActiveColumnsComponent","processHandleButtonOnEdit","ButtonEditProducts","ButtonDeleteCategoryProducts","updateDataOnClick","EditProductsPageColumns","Component","constructor","props","_isMounted","handleButtonOnClick","product","category","isProductsUpdated","setIsProductsUpdated","state","bind","setError","errorMessage","setState","ErrorMessageProducts","setpopupSmthWentWrongActive","value","popupSmthWentWrongActive","setEditActive","isEditActive","updateImage","productImage","updateProductCategory","array","productCategory","categoriesArray","updateProductName","productName","updateProductPrice","productPrice","updateProductInStock","productInStock","updateAfterDelete","isUpdated","updateProducts","valueIsLoading","productsArray","isLoadingProducts","updateDataCategories","categories","isLoadingCategories","isEditActiveId","IsSaveButtonVisible","IsEditButtonVisible","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","products","map","id","categoryId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport getProducts from '../api/get/getProducts';\nimport getCategories from '../../editCategory/api/get/getCategories';\nimport PopUpErrorLoading from '../../../common/popup/components/PopUpErrorLoadingComponent';\nimport IsEditActiveColumnsComponent from './IsEditActiveColumnsComponent';\nimport IsEditNotActiveColumnsComponent from './IsEditNotActiveColumnsComponent';\nimport processHandleButtonOnEdit from '../utils/processHandleButtonOnEdit';\nimport ButtonEditProducts from '../../../common/button/components/ButtonEditProductsComponent';\nimport ButtonDeleteCategoryProducts from '../../../common/button/components/ButtonDeleteCategoryProductsComponent';\nimport updateDataOnClick from '../utils/updateDataOnClick';\n\nclass EditProductsPageColumns extends React.Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      productsArray: [],\n      isEditActive: false,\n      isEditActiveId: '',\n      isUpdated: false,\n      isLoadingProducts: false,\n      isLoadingCategories: false,\n      ErrorMessageProducts: '',\n      popupSmthWentWrongActive: true,\n      IsSaveButtonVisible: false,\n      IsEditButtonVisible: true,\n      productImage: '',\n      productCategory: '',\n      productName: '',\n      productPrice: '',\n      productInStock: 1,\n      categoriesArray: [],\n    };\n    updateDataOnClick = updateDataOnClick.bind;\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await getProducts(this.updateProducts, this.setError);\n    await getCategories(this.updateDataCategories);\n    console.log(this);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const { isUpdated } = this.state;\n    if (prevState.isUpdated !== isUpdated) {\n      await getProducts(this.updateProducts, this.setError);\n      await getCategories(this.updateDataCategories);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n   handleButtonOnClick = async (product, category = false) => {\n     const { isProductsUpdated, setIsProductsUpdated } = this.props;\n     if (!category) {\n       processHandleButtonOnEdit(this.state, product, updateDataOnClick.bind(this),\n         isProductsUpdated,\n         setIsProductsUpdated);\n     } else {\n       updateDataOnClick(false, this.state, product, category).bind(this);\n     }\n   }\n\n   /*   updateDataOnClick = (save, state, product, category) => {\n    this.setState({\n      isUpdated: save ? !state.isUpdated : state.isUpdated,\n      isEditActive: !save,\n      isEditActiveId: product.id,\n      IsSaveButtonVisible: !!save,\n      IsEditButtonVisible: !save,\n      productImage: product.image,\n      productCategory: save ? state.productCategory : category.category,\n      productName: save ? state.productName : product.description,\n      productPrice: save ? state.productPrice : product.price,\n      productInStock: save ? state.productInStock : product.inStock,\n    });\n  } */\n\n  setError = (errorMessage) => this.setState({ ErrorMessageProducts: errorMessage });\n\n  setpopupSmthWentWrongActive = (value) => this.setState({ popupSmthWentWrongActive: value });\n\n  setEditActive = (value) => this.setState({ isEditActive: value });\n\n  updateImage = (value) => this.setState({ productImage: value });\n\n  updateProductCategory = (value, array) => {\n    this.setState({ productCategory: value, categoriesArray: array });\n  }\n\n  updateProductName = (value) => this.setState({ productName: value });\n\n  updateProductPrice = (value) => this.setState({ productPrice: value });\n\n  updateProductInStock = (value) => this.setState({ productInStock: value });\n\n  updateAfterDelete = () => {\n    const { isUpdated } = this.state;\n    this.setState({ isUpdated: !isUpdated });\n  }\n\n  updateProducts = (value, valueIsLoading) => {\n    if (this._isMounted) {\n      this.setState({\n        productsArray: value,\n        isLoadingProducts: valueIsLoading,\n      });\n    }\n  }\n\n  updateDataCategories = (value, valueIsLoading) => {\n    if (this._isMounted) {\n      this.setState({\n        categoriesArray: value.categories,\n        isLoadingCategories: valueIsLoading,\n      });\n    }\n  }\n\n  render() {\n    const {\n      isEditActive, isEditActiveId, ErrorMessageProducts, popupSmthWentWrongActive, productsArray,\n      isLoadingProducts, IsEditButtonVisible, isLoadingCategories, categoriesArray,\n    } = this.state;\n    const { isProductsUpdated, setIsProductsUpdated } = this.props;\n    if (!isLoadingProducts || !isLoadingCategories) {\n      return <div className=\"-isLoading\"> </div>;\n    }\n    if (ErrorMessageProducts) {\n      return (\n        <PopUpErrorLoading\n          popupSmthWentWrongActive={popupSmthWentWrongActive}\n          setpopupSmthWentWrongActive={this.setpopupSmthWentWrongActive}\n        />\n      );\n    }\n    return (\n      <>\n        {productsArray.products.map((product) => (\n          <li key={product.id}>\n            <div className=\"columns\">\n              {isEditActive && product.id === isEditActiveId\n                ? (\n                  <IsEditActiveColumnsComponent\n                    product={product}\n                    categoriesArray={categoriesArray}\n                    updateImage={this.updateImage}\n                    updateProductCategory={this.updateProductCategory}\n                    updateProductName={this.updateProductName}\n                    updateProductPrice={this.updateProductPrice}\n                    updateProductInStock={this.updateProductInStock}\n                  />\n                ) : (\n                  <IsEditNotActiveColumnsComponent\n                    product={product}\n                    categoriesArray={categoriesArray}\n                  />\n                )}\n              { categoriesArray.map((category) => (\n                product.categoryId === category.id && (\n                <ButtonEditProducts\n                  key={product.id}\n                  category={category}\n                  product={product}\n                  handleButtonOnClick={this.handleButtonOnClick}\n                  IsEditButtonVisible={IsEditButtonVisible}\n                  isEditActive={isEditActive}\n                  isEditActiveId={isEditActiveId}\n                />\n                )))}\n              <div className=\"columnDelete\">\n                <ButtonDeleteCategoryProducts\n                  item={product}\n                  category={false}\n                  updateAfterDelete={this.updateAfterDelete}\n                  setIsProductsUpdated={setIsProductsUpdated}\n                  isProductsUpdated={isProductsUpdated}\n                />\n              </div>\n            </div>\n          </li>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default EditProductsPageColumns;\n"]},"metadata":{},"sourceType":"module"}